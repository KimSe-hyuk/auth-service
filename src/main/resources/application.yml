spring:
  #  datasource:
  #    replication:
  #      driver-class-name: com.mysql.cj.jdbc.Driver
  #      username: root  # 마스터 DB의 사용자명
  #      password: 1234  # 마스터 DB의 비밀번호
  #      write:
  #        name: write
  #        username: root  # 여기에 'write' 사용자 이름을 명시
  #        password: 1234  # 'write' 사용자의 비밀번호
#           url: ${DB_MASTER_URL:jdbc:mysql://localhost:3309/deliveryservice?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true}
  #      reads:
  #        - name: read
#           url: ${DB_SLAVE_URL:jdbc:mysql://localhost:3309/deliveryservice?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true}
  #          username: replication_user  # 슬레이브 DB의 사용자명
  #          password: 1234  # 슬레이브 DB의 비밀번호
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3309/deliveryservice?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 1234
  data:
    redis:
      host: ${REDIS_HOST_URL:localhost}
      port: 6379
      timeout: 10000
      database: 0
  session:
    redis:
      repository-type: indexed
      namespace: my-session
    timeout: 600s
    flush-mode: immediate

  mail:
    host: smtp.gmail.com
    port: 587
    username: rlatpgur627@gmail.com
    password: atqhyjvbioladavg
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true


    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
      minimum-idle: 5

  flyway:
    baseline-on-migrate: true
    baseline-version: 1
#    user: ${spring.datasource.replication.write.username:spring.datasource.username}  # 마스터 DB의 username
#    password: ${spring.datasource.replication.write.password:spring.datasource.password}  # 마스터 DB의 password
#    url: ${spring.datasource.replication.write.url:spring.datasource.url}
    user: ${spring.datasource.username}  # 마스터 DB의 username
    password: ${spring.datasource.password}  # 마스터 DB의 password
    url: ${spring.datasource.url}  # 마스터 DB의 URL
security:
  oauth2:
    client:
      registration:
        google:
          client-id: 85427185905-numk6mhttfaoqdbfifba6q68utm8i0h4.apps.googleusercontent.com
          client-secret: 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
          authorization-grant-type: authorization_code
          scope: email, profile
          redirect-uri: http://localhost:7010/login/oauth2/code/google
        kakao:
          client-id: 118f545aa38dcd31bad414ade22b9cd6
          redirect-uri: http://localhost:7010/login/oauth2/code/kakao
          authorization-grant-type: authorization_code
          client-authentication-method: client_secret_post
          scope: profile_nickname, account_email
          client-name: Kakao
        naver:
          client-id: BNILOf9t1VA1AicXq92Q
          client-secret: pILIDjeE14
          authorization-grant-type: authorization_code
          redirect-uri: http://localhost:7010/login/oauth2/code/naver
          scope: name, email
      provider:
        kakao:
          authorization-uri: https://kauth.kakao.com/oauth/authorize?prompt=login
          token-uri: https://kauth.kakao.com/oauth/token
          user-info-uri: https://kapi.kakao.com/v2/user/me
          user-name-attribute: id
        google:
          authorization-uri: https://accounts.google.com/o/oauth2/v2/auth?prompt=login
        naver:
          authorization-uri: https://nid.naver.com/oauth2.0/authorize?prompt=login
          token-uri: https://nid.naver.com/oauth2.0/token
          user-info-uri: https://openapi.naver.com/v1/nid/me
          user-name-attribute: response



server:
  port: 7010
mybatis:
  mapper-locations: classpath:mappers/*.xml
  type-aliases-package: com.example.loginservice.model

jwt:
  issuer: rlatpgur627@gmail.com
  secret_key: pyjWTd80kOTqOrK2lhYnztUIlS3v7VxD4z1iki2XCuX7wYcXpi8XMKU15BDIit9AdZUPYDRQm7Z4r5fLPNZ7Sg==
naver:
  client-id: BNILOf9t1VA1AicXq92Q
  client-secret: pILIDjeE14
  redirect-url: ${REDIRECT_URL:http://localhost:7007}/login
app:
  url: ${REDIRECT_URL:http://localhost:7007}