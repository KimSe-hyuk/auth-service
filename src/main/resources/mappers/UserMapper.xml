<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.loginservice.mapper.MemberMapper">
    <resultMap id="userResultMap" type="Member">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="nickName" column="nick_name"/>
        <result property="emailProvider" column="email_provider"/>
        <result property="email" column="email"/>
        <result property="role" column="role"/>
    </resultMap>

    <select id="findUserByUserId"
            parameterType="String"
            resultMap="userResultMap">
        SELECT
            id,user_id,user_name, password,nick_name,email_provider ,email, role
        FROM
            user
        WHERE
            user_id = #{userId}
    </select>
    <select id="checkUserIdExist" parameterType="String" resultType="int">
        SELECT COUNT(id)
        FROM user
        WHERE user_id = #{userId}
    </select>
    <select id="checkNickNameExist" parameterType="String" resultType="int">
        SELECT COUNT(id)
        FROM user
        WHERE nick_name = #{nickName}
    </select>
    <select id="findEMailId"
            parameterType="com.example.loginservice.dto.EmailVerify.EmailSearchDTO"
            resultType="int">
        SELECT
           count(id)
        FROM
            user
        WHERE
            user_name =  #{userName} and email_provider = #{emailProvider}
    </select>
    <insert id="saveUser"
            parameterType="Member">
        INSERT INTO user (user_id, password, user_name, role,nick_name,email)
        VALUES (#{userId}, #{password}, #{userName}, #{role},#{nickName},#{email});
    </insert>
    <insert id="saveEmailUser"
            parameterType="Member">
        INSERT INTO user (user_id, user_name, role, email_provider, nick_name,email)
        VALUES (#{userId}, #{userName}, #{role},#{emailProvider},#{nickName},#{userId});
    </insert>
    <select id="findEmail" parameterType="String" resultType="int">
        SELECT
            count(id)
        FROM
            user
        WHERE
            email=#{email}
    </select>
    <select id="findEmailId" parameterType="com.example.loginservice.dto.find.FindUserIdEmailRequestDTO" resultType="int">
        SELECT
            count(id)
        FROM
            user
        WHERE
            email=#{email} AND user_id=#{userId}
    </select>
    <select id="getUserId" parameterType="String" resultType="String">
        SELECT
           user_id
        FROM
            user
        WHERE
            email=#{email}
    </select>
    <update id="updatePassword" parameterType="com.example.loginservice.model.Member">
        UPDATE user
        SET password = #{password}
        WHERE user_id = #{userId}
    </update>
</mapper>